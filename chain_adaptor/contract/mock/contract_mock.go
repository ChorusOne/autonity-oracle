// Code generated by MockGen. DO NOT EDIT.
// Source: chain_adaptor/contract/interface.go

// Package mock_oracle is a generated GoMock package.
package mock_oracle

import (
	oracle "autonity-oracle/chain_adaptor/contract"
	big "math/big"
	reflect "reflect"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
)

// MockContractAPI is a mock of ContractAPI interface.
type MockContractAPI struct {
	ctrl     *gomock.Controller
	recorder *MockContractAPIMockRecorder
}

// MockContractAPIMockRecorder is the mock recorder for MockContractAPI.
type MockContractAPIMockRecorder struct {
	mock *MockContractAPI
}

// NewMockContractAPI creates a new mock instance.
func NewMockContractAPI(ctrl *gomock.Controller) *MockContractAPI {
	mock := &MockContractAPI{ctrl: ctrl}
	mock.recorder = &MockContractAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractAPI) EXPECT() *MockContractAPIMockRecorder {
	return m.recorder
}

// GetCommittee mocks base method.
func (m *MockContractAPI) GetCommittee(opts *bind.CallOpts) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittee", opts)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommittee indicates an expected call of GetCommittee.
func (mr *MockContractAPIMockRecorder) GetCommittee(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittee", reflect.TypeOf((*MockContractAPI)(nil).GetCommittee), opts)
}

// GetRound mocks base method.
func (m *MockContractAPI) GetRound(opts *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound", opts)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRound indicates an expected call of GetRound.
func (mr *MockContractAPIMockRecorder) GetRound(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MockContractAPI)(nil).GetRound), opts)
}

// GetSymbols mocks base method.
func (m *MockContractAPI) GetSymbols(opts *bind.CallOpts) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbols", opts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbols indicates an expected call of GetSymbols.
func (mr *MockContractAPIMockRecorder) GetSymbols(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbols", reflect.TypeOf((*MockContractAPI)(nil).GetSymbols), opts)
}

// Vote mocks base method.
func (m *MockContractAPI) Vote(opts *bind.TransactOpts, _commit *big.Int, _prevotes []*big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", opts, _commit, _prevotes)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockContractAPIMockRecorder) Vote(opts, _commit, _prevotes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockContractAPI)(nil).Vote), opts, _commit, _prevotes)
}

// WatchUpdatedCommittee mocks base method.
func (m *MockContractAPI) WatchUpdatedCommittee(opts *bind.WatchOpts, sink chan<- *oracle.OracleUpdatedCommittee) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUpdatedCommittee", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUpdatedCommittee indicates an expected call of WatchUpdatedCommittee.
func (mr *MockContractAPIMockRecorder) WatchUpdatedCommittee(opts, sink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUpdatedCommittee", reflect.TypeOf((*MockContractAPI)(nil).WatchUpdatedCommittee), opts, sink)
}

// WatchUpdatedRound mocks base method.
func (m *MockContractAPI) WatchUpdatedRound(opts *bind.WatchOpts, sink chan<- *oracle.OracleUpdatedRound) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUpdatedRound", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUpdatedRound indicates an expected call of WatchUpdatedRound.
func (mr *MockContractAPIMockRecorder) WatchUpdatedRound(opts, sink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUpdatedRound", reflect.TypeOf((*MockContractAPI)(nil).WatchUpdatedRound), opts, sink)
}

// WatchUpdatedSymbols mocks base method.
func (m *MockContractAPI) WatchUpdatedSymbols(opts *bind.WatchOpts, sink chan<- *oracle.OracleUpdatedSymbols) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUpdatedSymbols", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUpdatedSymbols indicates an expected call of WatchUpdatedSymbols.
func (mr *MockContractAPIMockRecorder) WatchUpdatedSymbols(opts, sink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUpdatedSymbols", reflect.TypeOf((*MockContractAPI)(nil).WatchUpdatedSymbols), opts, sink)
}
