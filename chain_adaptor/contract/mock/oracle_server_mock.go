// Code generated by MockGen. DO NOT EDIT.
// Source: types/types.go

// Package mock_types is a generated GoMock package.
package mock_oracle

import (
	types "autonity-oracle/types"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockAggregator is a mock of Aggregator interface.
type MockAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorMockRecorder
}

// MockAggregatorMockRecorder is the mock recorder for MockAggregator.
type MockAggregatorMockRecorder struct {
	mock *MockAggregator
}

// NewMockAggregator creates a new mock instance.
func NewMockAggregator(ctrl *gomock.Controller) *MockAggregator {
	mock := &MockAggregator{ctrl: ctrl}
	mock.recorder = &MockAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregator) EXPECT() *MockAggregatorMockRecorder {
	return m.recorder
}

// Mean mocks base method.
func (m *MockAggregator) Mean(prices []decimal.Decimal) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mean", prices)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mean indicates an expected call of Mean.
func (mr *MockAggregatorMockRecorder) Mean(prices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mean", reflect.TypeOf((*MockAggregator)(nil).Mean), prices)
}

// Median mocks base method.
func (m *MockAggregator) Median(prices []decimal.Decimal) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Median", prices)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Median indicates an expected call of Median.
func (mr *MockAggregatorMockRecorder) Median(prices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Median", reflect.TypeOf((*MockAggregator)(nil).Median), prices)
}

// MockPricePool is a mock of PricePool interface.
type MockPricePool struct {
	ctrl     *gomock.Controller
	recorder *MockPricePoolMockRecorder
}

// MockPricePoolMockRecorder is the mock recorder for MockPricePool.
type MockPricePoolMockRecorder struct {
	mock *MockPricePool
}

// NewMockPricePool creates a new mock instance.
func NewMockPricePool(ctrl *gomock.Controller) *MockPricePool {
	mock := &MockPricePool{ctrl: ctrl}
	mock.recorder = &MockPricePoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPricePool) EXPECT() *MockPricePoolMockRecorder {
	return m.recorder
}

// AddPrices mocks base method.
func (m *MockPricePool) AddPrices(prices []types.Price) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPrices", prices)
}

// AddPrices indicates an expected call of AddPrices.
func (mr *MockPricePoolMockRecorder) AddPrices(prices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrices", reflect.TypeOf((*MockPricePool)(nil).AddPrices), prices)
}

// MockPluginClient is a mock of PluginClient interface.
type MockPluginClient struct {
	ctrl     *gomock.Controller
	recorder *MockPluginClientMockRecorder
}

// MockPluginClientMockRecorder is the mock recorder for MockPluginClient.
type MockPluginClientMockRecorder struct {
	mock *MockPluginClient
}

// NewMockPluginClient creates a new mock instance.
func NewMockPluginClient(ctrl *gomock.Controller) *MockPluginClient {
	mock := &MockPluginClient{ctrl: ctrl}
	mock.recorder = &MockPluginClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginClient) EXPECT() *MockPluginClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPluginClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPluginClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPluginClient)(nil).Close))
}

// FetchPrices mocks base method.
func (m *MockPluginClient) FetchPrices(symbols []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPrices", symbols)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchPrices indicates an expected call of FetchPrices.
func (mr *MockPluginClientMockRecorder) FetchPrices(symbols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPrices", reflect.TypeOf((*MockPluginClient)(nil).FetchPrices), symbols)
}

// Name mocks base method.
func (m *MockPluginClient) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPluginClientMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPluginClient)(nil).Name))
}

// StartTime mocks base method.
func (m *MockPluginClient) StartTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// StartTime indicates an expected call of StartTime.
func (mr *MockPluginClientMockRecorder) StartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTime", reflect.TypeOf((*MockPluginClient)(nil).StartTime))
}

// Version mocks base method.
func (m *MockPluginClient) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockPluginClientMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockPluginClient)(nil).Version))
}

// MockOracleService is a mock of OracleService interface.
type MockOracleService struct {
	ctrl     *gomock.Controller
	recorder *MockOracleServiceMockRecorder
}

// MockOracleServiceMockRecorder is the mock recorder for MockOracleService.
type MockOracleServiceMockRecorder struct {
	mock *MockOracleService
}

// NewMockOracleService creates a new mock instance.
func NewMockOracleService(ctrl *gomock.Controller) *MockOracleService {
	mock := &MockOracleService{ctrl: ctrl}
	mock.recorder = &MockOracleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOracleService) EXPECT() *MockOracleServiceMockRecorder {
	return m.recorder
}

// GetPrices mocks base method.
func (m *MockOracleService) GetPrices() types.PriceBySymbol {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrices")
	ret0, _ := ret[0].(types.PriceBySymbol)
	return ret0
}

// GetPrices indicates an expected call of GetPrices.
func (mr *MockOracleServiceMockRecorder) GetPrices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrices", reflect.TypeOf((*MockOracleService)(nil).GetPrices))
}

// GetPricesBySymbols mocks base method.
func (m *MockOracleService) GetPricesBySymbols(symbols []string) types.PriceBySymbol {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPricesBySymbols", symbols)
	ret0, _ := ret[0].(types.PriceBySymbol)
	return ret0
}

// GetPricesBySymbols indicates an expected call of GetPricesBySymbols.
func (mr *MockOracleServiceMockRecorder) GetPricesBySymbols(symbols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPricesBySymbols", reflect.TypeOf((*MockOracleService)(nil).GetPricesBySymbols), symbols)
}

// UpdateSymbols mocks base method.
func (m *MockOracleService) UpdateSymbols(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSymbols", arg0)
}

// UpdateSymbols indicates an expected call of UpdateSymbols.
func (mr *MockOracleServiceMockRecorder) UpdateSymbols(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSymbols", reflect.TypeOf((*MockOracleService)(nil).UpdateSymbols), arg0)
}
